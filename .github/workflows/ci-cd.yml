name: Java CI with Docker Compose

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        # Checks out your repository under $GITHUB_WORKSPACE, so your workflow can access it

      - name: Run Tests
        run: mvn test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        # Sets up Docker Buildx for advanced build capabilities like building multi-architecture images

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
        # Caches Docker layers to speed up subsequent builds

      - name: Build with Docker Compose
        run: docker-compose -f docker-compose.yml up --build -d
        # Builds and starts the containers defined in your Docker Compose file in detached mode

#      - name: Run Checkstyle
#        run: mvn -B checkstyle:checkstyle
##        Executes Checkstyle to check code against set rules

#      - name: Run tests
#        run: docker-compose -f docker-compose.yml exec -T web mvn test
#        # Executes your tests within the running 'web' service container
##        -T is needed because a CI/CD pipeline is non interactive (no TTY (CLI))
##        -f means to use this specific filename instead of default (even though in our case they are the same)
      - name: Clean up Docker Compose
        if: always()
        run: docker-compose -f docker-compose.yml down
        # Stops and removes containers, networks, volumes, and images created by up












    #    - name: Log in to Heroku Container Registry
#      run: heroku container:login
#      env:
#        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
#
#    - name: Push Docker Image to Heroku
#      run: heroku container:push web --app springboot-loans --arg JAR_FILE=/app/target/*.jar
#      env:
#        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
#
##Releases pushed Docker image to Heroku app
#    - name: Release Image to Heroku
#      run: heroku container:release web --app springboot-loans
#      env:
#        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
#




#    - name: Deploy to Prod
#      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
#      uses: akhileshns/heroku-deploy@v3.12.12  # This is a community action for deploying to Heroku
#      with:
#        heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
#        heroku_app_name: "springboot-loans"
#        heroku_email: "vishalmkumar3@gmail.com"
#      env:
#        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

    
